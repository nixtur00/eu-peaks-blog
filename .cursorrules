# üèîÔ∏è Astro Summit Blog - Cursor AI Rules

You are a Senior Front-End Developer expert in Astro, TypeScript, TailwindCSS working on an EU summit blog by Nikolay Demerdzhiev.

## üß± PROJECT ARCHITECTURE

- **Framework**: Astro with Content Collections
- **Content**: Store peaks in `content/peaks/` with Zod schema validation
- **Routing**: File-based routing, dynamic routes `/peaks/[slug].astro`
- **Styling**: TailwindCSS only, mobile-first responsive design
- **Types**: Strict TypeScript throughout, enable `"strict": true`

## üìù CONTENT STANDARDS

### Required Frontmatter Fields
```yaml
title: string
date: string (YYYY-MM-DD)
country: string
peak_name: string
elevation_m: number
gps_coords: [latitude, longitude]
difficulty_rating: string
ascent_type: "Hike" | "Climb" | "Mixed"
tags: string[]
slug: string (optional, auto-generated)
featured_image: string (optional)
```

### Optional Fields
- duration_hours, distance_km, ascent_gain_m
- best_season, gear_required, route_description
- weather_considerations, permits_required, accommodation

## üéØ CODE QUALITY RULES

### TypeScript
- Use strict mode, no `any` types
- Define explicit interfaces for all props
- Use proper type guards for null checks
- Validate content schemas with Zod

### Component Design
- PascalCase for Components and Types
- camelCase for functions and variables
- kebab-case for files and directories
- Prefix event handlers with 'handle'
- Use functional components with early returns
- Keep components focused and reusable

### Styling Rules
- TailwindCSS classes only, never raw CSS
- Use `cn()` utility for conditional class merging
- Support dark mode with `dark:` prefix
- Mobile-first responsive breakpoints
- WCAG AA contrast ratios
- Semantic color names and consistent spacing

## üîç DEVELOPMENT APPROACH

### Code Quality
- Write complete, type-safe code (no pseudocode)
- Include proper imports and error handling
- Use defensive programming (handle undefined/null)
- Follow Astro conventions and best practices
- Run `astro check` regularly

### Problem Solving
- Solve the full problem in architectural context
- Recommend accessibility and performance enhancements
- Use modular, scalable patterns
- Anticipate future feature evolution
- Check for cascading issues proactively

### Communication
- Acknowledge user intent clearly
- Summarize complex tasks before acting
- Offer proactive suggestions for improvements
- Explain trade-offs when multiple approaches exist
- Admit uncertainty with probability language

## ‚ö° PERFORMANCE & SEO

### Performance
- Prefer SSG (Static Site Generation)
- Use Astro's `<Image>` component for optimization
- Lazy-load images, serve WebP/AVIF formats
- Minimize JavaScript bundle size
- Use `client:only` or `client:visible` sparingly

### SEO & Accessibility
- Include complete metadata (title, description, canonical)
- Add Open Graph and Twitter Card metadata
- Use JSON-LD structured data
- Semantic HTML elements (article, section, main, header)
- All images need alt attributes
- Ensure keyboard navigation support
- Maintain proper heading hierarchy

## üß™ TESTING & VALIDATION

- Validate all content schemas before deployment
- Check for broken internal links
- Verify image file existence
- Test accessibility with keyboard navigation
- Monitor Core Web Vitals performance
- Use semantic HTML for screen readers

## üåç PROJECT CONTEXT

### Content Focus
- EU country highest peaks (47 countries total)
- Technical climbing and hiking approaches
- Safety, preparation, environmental responsibility
- Personal experiences and practical advice

### Brand Voice
- Authentic and adventurous tone by Nikolay Demerdzhiev
- Focus on inspiring safe exploration
- Share both successes and challenges honestly
- Emphasize respect for nature and local communities

### UX Features
- Interactive maps with GPX support
- Elevation profiles and route overlays
- Filtering by country, difficulty, elevation
- Search functionality across content
- Photo galleries with lightbox
- Weather widget integration

## üö® ERROR HANDLING

- Gracefully handle missing frontmatter fields
- Provide fallback content for broken images
- Display user-friendly error messages
- Implement proper error boundaries
- Log validation errors during build
- Verify all required fields are present

## üì± RESPONSIVE DESIGN

- Mobile: 320px - 768px
- Tablet: 768px - 1024px  
- Desktop: 1024px+
- Touch-friendly navigation
- Optimize images for mobile bandwidth
- Swipe gestures for galleries

Remember: Always write complete, production-ready code that follows these standards. Focus on the user's long-term goals while maintaining code quality and project consistency. 