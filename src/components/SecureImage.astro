---
import { Image } from 'astro:assets';
import { isValidImageSource } from '../utils/security';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'sync' | 'async' | 'auto';
  sizes?: string;
  quality?: number;
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  class: className = '',
  loading = 'lazy',
  decoding = 'async',
  sizes,
  quality = 80,
  ...rest
} = Astro.props;

// Validate image source for security
if (!isValidImageSource(src)) {
  console.error(`Invalid image source: ${src}`);
  throw new Error(`Invalid image source: ${src}`);
}

// Ensure alt text is provided for accessibility
if (!alt || alt.trim() === '') {
  console.error(`Missing alt text for image: ${src}`);
  throw new Error(`Alt text is required for accessibility: ${src}`);
}

// Sanitize alt text
const sanitizedAlt = alt
  .replace(/<[^>]*>/g, '') // Remove HTML tags
  .replace(/[<>&"']/g, char => {
    const htmlEntities: Record<string, string> = {
      '<': '&lt;',
      '>': '&gt;',
      '&': '&amp;',
      '"': '&quot;',
      "'": '&#39;',
    };
    return htmlEntities[char] || char;
  })
  .trim();

// Default responsive sizes if not provided
const defaultSizes = sizes || '(max-width: 768px) 100vw, (max-width: 1024px) 80vw, 60vw';

// Security and performance optimized classes
const secureClasses = [
  className,
  'object-cover', // Prevent aspect ratio issues
  'max-w-full', // Responsive by default
  'h-auto', // Maintain aspect ratio
]
  .filter(Boolean)
  .join(' ');
---

{
  src.startsWith('/images/') ? (
    <Image
      src={src}
      alt={sanitizedAlt}
      width={width}
      height={height}
      loading={loading}
      decoding={decoding}
      class={secureClasses}
      sizes={defaultSizes}
      quality={quality}
      format="webp"
      {...rest}
    />
  ) : (
    <img
      src={src}
      alt={sanitizedAlt}
      width={width}
      height={height}
      loading={loading}
      decoding={decoding}
      class={secureClasses}
      sizes={defaultSizes}
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
      {...rest}
    />
  )
}

<style>
  /* Fallback styles for security and performance */
  img {
    /* Prevent layout shift */
    min-height: 100px;
    background-color: #f3f4f6;

    /* Security: prevent potential exploits */
    pointer-events: auto;
    user-select: none;

    /* Performance: GPU acceleration for smooth loading */
    transform: translateZ(0);
    will-change: auto;

    /* Accessibility: ensure images are focusable when needed */
    outline: none;
  }

  /* Loading state */
  img[loading='lazy'] {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  img[loading='lazy'].loaded {
    opacity: 1;
  }

  /* Error state styling */
  img:broken,
  img[src=''],
  img:not([src]) {
    display: inline-block;
    width: 100%;
    height: 200px;
    background: #f3f4f6;
    border: 2px dashed #d1d5db;
    color: #6b7280;
    font-family: system-ui, sans-serif;
    font-size: 14px;
    text-align: center;
    line-height: 200px;
    content: 'Image not available';
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    img {
      background-color: #1f2937;
    }

    img:broken,
    img[src=''],
    img:not([src]) {
      background: #1f2937;
      border-color: #374151;
      color: #9ca3af;
    }
  }
</style>

<script>
  // Client-side image loading enhancement
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('img[loading="lazy"]');

    const imageObserver = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;

          // Add loaded class when image finishes loading
          img.addEventListener('load', () => {
            img.classList.add('loaded');
          });

          // Handle image loading errors gracefully
          img.addEventListener('error', () => {
            console.warn(`Failed to load image: ${img.src}`);
            img.style.display = 'none';

            // Create fallback element
            const fallback = document.createElement('div');
            fallback.className =
              'image-fallback bg-gray-100 dark:bg-gray-800 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center text-gray-500 dark:text-gray-400';
            fallback.innerHTML = `
              <svg class="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p>Image not available</p>
              <p class="text-sm mt-1">${img.alt || 'Peak image'}</p>
            `;

            img.parentNode?.insertBefore(fallback, img);
          });

          imageObserver.unobserve(img);
        }
      });
    });

    images.forEach(img => imageObserver.observe(img));
  });
</script>

